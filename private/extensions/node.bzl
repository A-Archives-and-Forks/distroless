"node"

BUILD_TMPL = """\
# GENERATED BY node_archive.bzl
load("@distroless//private/pkg:debian_spdx.bzl", "debian_spdx")
load("@distroless//private/util:merge_providers.bzl", "merge_providers")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

pkg_tar(
    name = "data",
    srcs = glob(
        [
            "output/bin/node",
            "output/LICENSE",
        ],
    ),
    package_dir = "/nodejs",
    strip_prefix = "external/{canonical_name}/output"
)

pkg_tar(
    name = "_control",
    srcs = ["control"]
)

debian_spdx(
    name = "spdx",
    control = ":_control.tar",
    data = ":data.tar",
    package_name = "{package_name}",
    spdx_id = "{spdx_id}",
    sha256 = "{sha256}",
    urls = [{urls}]
)

merge_providers(
    name = "{name}",
    srcs = [":data", ":spdx"],
    visibility = ["//visibility:public"],
)
"""

def _impl(rctx):
    rctx.report_progress("Fetching {}".format(rctx.attr.package_name))
    rctx.download_and_extract(
        url = rctx.attr.urls,
        sha256 = rctx.attr.sha256,
        type = rctx.attr.type,
        stripPrefix = rctx.attr.strip_prefix,
        output = "output",
    )
    rctx.template(
        "control",
        rctx.attr.control,
        substitutions = {
            "{{VERSION}}": rctx.attr.version,
            "{{ARCHITECTURE}}": rctx.attr.architecture,
            "{{SHA256}}": rctx.attr.sha256,
        },
    )
    rctx.file(
        "BUILD.bazel",
        content = BUILD_TMPL.format(
            canonical_name = rctx.attr.name,
            name = rctx.attr.name.split("~")[-1],
            package_name = rctx.attr.package_name,
            spdx_id = rctx.attr.name,
            urls = ",".join(['"%s"' % url for url in rctx.attr.urls]),
            sha256 = rctx.attr.sha256,
        ),
    )

node_archive = repository_rule(
    implementation = _impl,
    attrs = {
        "urls": attr.string_list(mandatory = True),
        "sha256": attr.string(mandatory = True),
        "type": attr.string(default = ".tar.gz"),
        "strip_prefix": attr.string(),
        "package_name": attr.string(default = "nodejs"),
        "version": attr.string(mandatory = True),
        "architecture": attr.string(mandatory = True),
        # control is only used to populate the sbom, see https://github.com/GoogleContainerTools/distroless/issues/1373
        # for why writing debian control files to the image is incompatible with scanners.
        "control": attr.label(),
    },
)

def _node_impl(module_ctx):
    mod = module_ctx.modules[0]

    if len(module_ctx.modules) > 1:
        fail("node.archive should be called only once")
    if not mod.is_root:
        fail("node.archive should be called from root module only.")

    # Node (https://nodejs.org/en/about/releases/)
    # Follow Node's maintainence schedule and support all LTS versions that are not end of life

    node_archive(
        name = "nodejs20_amd64",
        sha256 = "4eba5fbe1fb10753bc06e42f001a91c5cec16798b7764a3e9257adc59af47fe1",
        strip_prefix = "node-v20.19.5-linux-x64/",
        urls = ["https://nodejs.org/dist/v20.19.5/node-v20.19.5-linux-x64.tar.gz"],
        version = "20.19.5",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm64",
        sha256 = "a08b513de673853ca16395ec461a104a99bf0e941ebb7baedb98b30cd221d8cc",
        strip_prefix = "node-v20.19.5-linux-arm64/",
        urls = ["https://nodejs.org/dist/v20.19.5/node-v20.19.5-linux-arm64.tar.gz"],
        version = "20.19.5",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm",
        sha256 = "3237e6c5c3a34bbb7db4f4f7c8c3618bd67452a8bee0b77abd6e791e527b366e",
        strip_prefix = "node-v20.19.5-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v20.19.5/node-v20.19.5-linux-armv7l.tar.gz"],
        version = "20.19.5",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_ppc64le",
        sha256 = "11be028464768c8704ba8b4fba6e1c0eb0cfbab1c12c9e6eda5fa51df60326cc",
        strip_prefix = "node-v20.19.5-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v20.19.5/node-v20.19.5-linux-ppc64le.tar.gz"],
        version = "20.19.5",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_s390x",
        sha256 = "a0e5a52c8ab552a0255520d60d3209d97913d6229d9bb05c56135be8f41ae79e",
        strip_prefix = "node-v20.19.5-linux-s390x/",
        urls = ["https://nodejs.org/dist/v20.19.5/node-v20.19.5-linux-s390x.tar.gz"],
        version = "20.19.5",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_amd64",
        sha256 = "d36e56998220085782c0ca965f9d51b7726335aed2f5fc7321c6c0ad233aa96d",
        strip_prefix = "node-v22.19.0-linux-x64/",
        urls = ["https://nodejs.org/dist/v22.19.0/node-v22.19.0-linux-x64.tar.gz"],
        version = "22.19.0",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm64",
        sha256 = "d32817b937219b8f131a28546035183d79e7fd17a86e38ccb8772901a7cd9009",
        strip_prefix = "node-v22.19.0-linux-arm64/",
        urls = ["https://nodejs.org/dist/v22.19.0/node-v22.19.0-linux-arm64.tar.gz"],
        version = "22.19.0",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm",
        sha256 = "969037e6da2a710904d121dcb998510bc0d5d4d61d70ce5eb578096cf36c60e8",
        strip_prefix = "node-v22.19.0-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v22.19.0/node-v22.19.0-linux-armv7l.tar.gz"],
        version = "22.19.0",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_ppc64le",
        sha256 = "b18b05265c5586e0a7797831ed747eeac7300fd2c495b8b5276596823b076e12",
        strip_prefix = "node-v22.19.0-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v22.19.0/node-v22.19.0-linux-ppc64le.tar.gz"],
        version = "22.19.0",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_s390x",
        sha256 = "d434665268adf0670a36676f5f3f46aaf5e13aad3fc81dac87119e871745bf22",
        strip_prefix = "node-v22.19.0-linux-s390x/",
        urls = ["https://nodejs.org/dist/v22.19.0/node-v22.19.0-linux-s390x.tar.gz"],
        version = "22.19.0",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_amd64",
        sha256 = "8cf85258402e056efa041168c9b162a4e3b229ebfad5000850b8941c974e9d5a",
        strip_prefix = "node-v24.7.0-linux-x64/",
        urls = ["https://nodejs.org/dist/v24.7.0/node-v24.7.0-linux-x64.tar.gz"],
        version = "24.7.0",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_arm64",
        sha256 = "04df0283d2a8a06271a690fbe2528661527b3a09f0f28c8bb63327d8888be184",
        strip_prefix = "node-v24.7.0-linux-arm64/",
        urls = ["https://nodejs.org/dist/v24.7.0/node-v24.7.0-linux-arm64.tar.gz"],
        version = "24.7.0",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_ppc64le",
        sha256 = "85378129414ca95c509317360c519328ae98d34160fc852408ba0209033e5f82",
        strip_prefix = "node-v24.7.0-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v24.7.0/node-v24.7.0-linux-ppc64le.tar.gz"],
        version = "24.7.0",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_s390x",
        sha256 = "d5b26b197795872dbd69f4dd8c275e8a08ca1be69c9e013e3cd9a6f68939e59d",
        strip_prefix = "node-v24.7.0-linux-s390x/",
        urls = ["https://nodejs.org/dist/v24.7.0/node-v24.7.0-linux-s390x.tar.gz"],
        version = "24.7.0",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    return module_ctx.extension_metadata(
        root_module_direct_deps = [
            "nodejs20_amd64",
            "nodejs20_arm64",
            "nodejs20_arm",
            "nodejs20_ppc64le",
            "nodejs20_s390x",
            "nodejs22_amd64",
            "nodejs22_arm64",
            "nodejs22_arm",
            "nodejs22_ppc64le",
            "nodejs22_s390x",
            "nodejs24_amd64",
            "nodejs24_arm64",
            "nodejs24_ppc64le",
            "nodejs24_s390x",
        ],
        root_module_direct_dev_deps = [],
    )

_archive = tag_class(attrs = {})

node = module_extension(
    implementation = _node_impl,
    tag_classes = {
        "archive": _archive,
    },
)

"node"

BUILD_TMPL = """\
# GENERATED BY node_archive.bzl
load("@distroless//private/pkg:debian_spdx.bzl", "debian_spdx")
load("@distroless//private/util:merge_providers.bzl", "merge_providers")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

pkg_tar(
    name = "data",
    srcs = glob(
        [
            "output/bin/node",
            "output/LICENSE",
        ],
    ),
    package_dir = "/nodejs",
    strip_prefix = "external/{canonical_name}/output"
)

pkg_tar(
    name = "_control",
    srcs = ["control"]
)

debian_spdx(
    name = "spdx",
    control = ":_control.tar",
    data = ":data.tar",
    package_name = "{package_name}",
    spdx_id = "{spdx_id}",
    sha256 = "{sha256}",
    urls = [{urls}]
)

merge_providers(
    name = "{name}",
    srcs = [":data", ":spdx"],
    visibility = ["//visibility:public"],
)
"""

def _impl(rctx):
    rctx.report_progress("Fetching {}".format(rctx.attr.package_name))
    rctx.download_and_extract(
        url = rctx.attr.urls,
        sha256 = rctx.attr.sha256,
        type = rctx.attr.type,
        stripPrefix = rctx.attr.strip_prefix,
        output = "output",
    )
    rctx.template(
        "control",
        rctx.attr.control,
        substitutions = {
            "{{VERSION}}": rctx.attr.version,
            "{{ARCHITECTURE}}": rctx.attr.architecture,
            "{{SHA256}}": rctx.attr.sha256,
        },
    )
    rctx.file(
        "BUILD.bazel",
        content = BUILD_TMPL.format(
            canonical_name = rctx.attr.name,
            name = rctx.attr.name.split("~")[-1],
            package_name = rctx.attr.package_name,
            spdx_id = rctx.attr.name,
            urls = ",".join(['"%s"' % url for url in rctx.attr.urls]),
            sha256 = rctx.attr.sha256,
        ),
    )

node_archive = repository_rule(
    implementation = _impl,
    attrs = {
        "urls": attr.string_list(mandatory = True),
        "sha256": attr.string(mandatory = True),
        "type": attr.string(default = ".tar.gz"),
        "strip_prefix": attr.string(),
        "package_name": attr.string(default = "nodejs"),
        "version": attr.string(mandatory = True),
        "architecture": attr.string(mandatory = True),
        # control is only used to populate the sbom, see https://github.com/GoogleContainerTools/distroless/issues/1373
        # for why writing debian control files to the image is incompatible with scanners.
        "control": attr.label(),
    },
)

def _node_impl(module_ctx):
    mod = module_ctx.modules[0]

    if len(module_ctx.modules) > 1:
        fail("node.archive should be called only once")
    if not mod.is_root:
        fail("node.archive should be called from root module only.")

    # Node (https://nodejs.org/en/about/releases/)
    # Follow Node's maintainence schedule and support all LTS versions that are not end of life

    node_archive(
        name = "nodejs18_amd64",
        sha256 = "ca593cc143875d33b257ab45ae629a02485333e8096221c44ef62c99678aa7fc",
        strip_prefix = "node-v18.20.7-linux-x64/",
        urls = ["https://nodejs.org/dist/v18.20.7/node-v18.20.7-linux-x64.tar.gz"],
        version = "18.20.7",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs18_arm64",
        sha256 = "fc1f0e0c1022c5486da4726c58dc678c076ac2d7ad30b1b47b9071f043adce1e",
        strip_prefix = "node-v18.20.7-linux-arm64/",
        urls = ["https://nodejs.org/dist/v18.20.7/node-v18.20.7-linux-arm64.tar.gz"],
        version = "18.20.7",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs18_arm",
        sha256 = "1e8d3685417be34f8714044015cada78d82747566c15f3824ef28e9c22e3e68a",
        strip_prefix = "node-v18.20.7-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v18.20.7/node-v18.20.7-linux-armv7l.tar.gz"],
        version = "18.20.7",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs18_ppc64le",
        sha256 = "4520710588d6109f818c19568d17ffbdbf89d60c96e0f9547a8771730e135901",
        strip_prefix = "node-v18.20.7-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v18.20.7/node-v18.20.7-linux-ppc64le.tar.gz"],
        version = "18.20.7",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs18_s390x",
        sha256 = "fecbe173c8ce1ee1d2c6475546a8d30c4426861505ef69254bd048e6d91f23fb",
        strip_prefix = "node-v18.20.7-linux-s390x/",
        urls = ["https://nodejs.org/dist/v18.20.7/node-v18.20.7-linux-s390x.tar.gz"],
        version = "18.20.7",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_amd64",
        sha256 = "9fc3952da39b20d1fcfdb777b198cc035485afbbb1004b4df93f35245d61151e",
        strip_prefix = "node-v20.18.3-linux-x64/",
        urls = ["https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-x64.tar.gz"],
        version = "20.18.3",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm64",
        sha256 = "93a9df19238adfaa289f4784041d03edaf2fdd89fbb247faffca2fe4a1000703",
        strip_prefix = "node-v20.18.3-linux-arm64/",
        urls = ["https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-arm64.tar.gz"],
        version = "20.18.3",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm",
        sha256 = "8a84eb34287db6a273066934d7195e429f57b91686b62fc19497210204a2b3de",
        strip_prefix = "node-v20.18.3-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-armv7l.tar.gz"],
        version = "20.18.3",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_ppc64le",
        sha256 = "787612cd7a2461b5340fee1406d8f958e9bb9349030189a03d37fc92529d2f74",
        strip_prefix = "node-v20.18.3-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-ppc64le.tar.gz"],
        version = "20.18.3",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_s390x",
        sha256 = "72156704416f4c32f8eb72e9ee59a0fcacbd972f28b2e05b9c888c7098acd2d2",
        strip_prefix = "node-v20.18.3-linux-s390x/",
        urls = ["https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-s390x.tar.gz"],
        version = "20.18.3",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_amd64",
        sha256 = "9d942932535988091034dc94cc5f42b6dc8784d6366df3a36c4c9ccb3996f0c2",
        strip_prefix = "node-v22.14.0-linux-x64/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-x64.tar.gz"],
        version = "22.14.0",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm64",
        sha256 = "8cf30ff7250f9463b53c18f89c6c606dfda70378215b2c905d0a9a8b08bd45e0",
        strip_prefix = "node-v22.14.0-linux-arm64/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-arm64.tar.gz"],
        version = "22.14.0",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm",
        sha256 = "1cadf5aee7d71b6f0921235faec05e42d908ba5e8a76959f0697968fe0741204",
        strip_prefix = "node-v22.14.0-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-armv7l.tar.gz"],
        version = "22.14.0",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_ppc64le",
        sha256 = "a0818ece898175db71a1df81dc4fdc3794a14b03a3901894a88e465e745ea429",
        strip_prefix = "node-v22.14.0-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-ppc64le.tar.gz"],
        version = "22.14.0",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_s390x",
        sha256 = "0e4232e4b3c0312a391bb9c0c36524623b3b616cac5d0338d743ae4228f984d1",
        strip_prefix = "node-v22.14.0-linux-s390x/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-s390x.tar.gz"],
        version = "22.14.0",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    return module_ctx.extension_metadata(
        root_module_direct_deps = [
            "nodejs18_amd64",
            "nodejs18_arm64",
            "nodejs18_arm",
            "nodejs18_ppc64le",
            "nodejs18_s390x",
            "nodejs20_amd64",
            "nodejs20_arm64",
            "nodejs20_arm",
            "nodejs20_ppc64le",
            "nodejs20_s390x",
            "nodejs22_amd64",
            "nodejs22_arm64",
            "nodejs22_arm",
            "nodejs22_ppc64le",
            "nodejs22_s390x",
        ],
        root_module_direct_dev_deps = [],
    )

_archive = tag_class(attrs = {})

node = module_extension(
    implementation = _node_impl,
    tag_classes = {
        "archive": _archive,
    },
)

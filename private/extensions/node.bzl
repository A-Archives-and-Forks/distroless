"node"

BUILD_TMPL = """\
# GENERATED BY node_archive.bzl
load("@distroless//private/pkg:debian_spdx.bzl", "debian_spdx")
load("@distroless//private/util:merge_providers.bzl", "merge_providers")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

pkg_tar(
    name = "data",
    srcs = glob(
        [
            "output/bin/node",
            "output/LICENSE",
        ],
    ),
    package_dir = "/nodejs",
    strip_prefix = "external/{canonical_name}/output"
)

pkg_tar(
    name = "_control",
    srcs = ["control"]
)

debian_spdx(
    name = "spdx",
    control = ":_control.tar",
    data = ":data.tar",
    package_name = "{package_name}",
    spdx_id = "{spdx_id}",
    sha256 = "{sha256}",
    urls = [{urls}]
)

merge_providers(
    name = "{name}",
    srcs = [":data", ":spdx"],
    visibility = ["//visibility:public"],
)
"""

def _impl(rctx):
    rctx.report_progress("Fetching {}".format(rctx.attr.package_name))
    rctx.download_and_extract(
        url = rctx.attr.urls,
        sha256 = rctx.attr.sha256,
        type = rctx.attr.type,
        stripPrefix = rctx.attr.strip_prefix,
        output = "output",
    )
    rctx.template(
        "control",
        rctx.attr.control,
        substitutions = {
            "{{VERSION}}": rctx.attr.version,
            "{{ARCHITECTURE}}": rctx.attr.architecture,
            "{{SHA256}}": rctx.attr.sha256,
        },
    )
    rctx.file(
        "BUILD.bazel",
        content = BUILD_TMPL.format(
            canonical_name = rctx.attr.name,
            name = rctx.attr.name.split("~")[-1],
            package_name = rctx.attr.package_name,
            spdx_id = rctx.attr.name,
            urls = ",".join(['"%s"' % url for url in rctx.attr.urls]),
            sha256 = rctx.attr.sha256,
        ),
    )

node_archive = repository_rule(
    implementation = _impl,
    attrs = {
        "urls": attr.string_list(mandatory = True),
        "sha256": attr.string(mandatory = True),
        "type": attr.string(default = ".tar.gz"),
        "strip_prefix": attr.string(),
        "package_name": attr.string(default = "nodejs"),
        "version": attr.string(mandatory = True),
        "architecture": attr.string(mandatory = True),
        # control is only used to populate the sbom, see https://github.com/GoogleContainerTools/distroless/issues/1373
        # for why writing debian control files to the image is incompatible with scanners.
        "control": attr.label(),
    },
)

def _node_impl(module_ctx):
    mod = module_ctx.modules[0]

    if len(module_ctx.modules) > 1:
        fail("node.archive should be called only once")
    if not mod.is_root:
        fail("node.archive should be called from root module only.")

    # Node (https://nodejs.org/en/about/releases/)
    # Follow Node's maintainence schedule and support all LTS versions that are not end of life

    node_archive(
        name = "nodejs20_amd64",
        sha256 = "76272878069683c3a36b933d2f4842436a26b527daa930ae9346b477011ee2f3",
        strip_prefix = "node-v20.19.3-linux-x64/",
        urls = ["https://nodejs.org/dist/v20.19.3/node-v20.19.3-linux-x64.tar.gz"],
        version = "20.19.3",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm64",
        sha256 = "8e6939f63b736470bf2cbda596ab62393f26d9af9d7046d61270899880d4f149",
        strip_prefix = "node-v20.19.3-linux-arm64/",
        urls = ["https://nodejs.org/dist/v20.19.3/node-v20.19.3-linux-arm64.tar.gz"],
        version = "20.19.3",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm",
        sha256 = "c9cb3e73efacb8e3cce47f36b0fd0b823a84b973047f1ab58a5fce99bc6b7536",
        strip_prefix = "node-v20.19.3-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v20.19.3/node-v20.19.3-linux-armv7l.tar.gz"],
        version = "20.19.3",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_ppc64le",
        sha256 = "b38c429376c4aeee09e0e3ba3294db9e2683e896747b0050aa84ed3401706389",
        strip_prefix = "node-v20.19.3-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v20.19.3/node-v20.19.3-linux-ppc64le.tar.gz"],
        version = "20.19.3",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_s390x",
        sha256 = "d2ffe8fbc8b3f6eef0cb6ea3719c562d0c4535870e2a2d2f0685e7d2ae8b1c69",
        strip_prefix = "node-v20.19.3-linux-s390x/",
        urls = ["https://nodejs.org/dist/v20.19.3/node-v20.19.3-linux-s390x.tar.gz"],
        version = "20.19.3",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_amd64",
        sha256 = "fb870226119d47378fa9c92c4535389c72dae14fcc7b47e6fdcc82c43de5a547",
        strip_prefix = "node-v22.16.0-linux-x64/",
        urls = ["https://nodejs.org/dist/v22.16.0/node-v22.16.0-linux-x64.tar.gz"],
        version = "22.16.0",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm64",
        sha256 = "1725602e9fb150eb8b8220a899085190e1c04d1a5f3862b01c3dc1dfce0157f9",
        strip_prefix = "node-v22.16.0-linux-arm64/",
        urls = ["https://nodejs.org/dist/v22.16.0/node-v22.16.0-linux-arm64.tar.gz"],
        version = "22.16.0",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm",
        sha256 = "d4c3d8b6862208f0e0d6e20726a8dc5fb019cba8333c72dfd97b34ceed8d22a4",
        strip_prefix = "node-v22.16.0-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v22.16.0/node-v22.16.0-linux-armv7l.tar.gz"],
        version = "22.16.0",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_ppc64le",
        sha256 = "b4eec15ffd2d738ae34566057a6928e789e02a0f47176f4af8520f1248c63aab",
        strip_prefix = "node-v22.16.0-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v22.16.0/node-v22.16.0-linux-ppc64le.tar.gz"],
        version = "22.16.0",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_s390x",
        sha256 = "668a5c65ade42f08d921c48a1c14437d10d026291e381d2541c2b0a585724567",
        strip_prefix = "node-v22.16.0-linux-s390x/",
        urls = ["https://nodejs.org/dist/v22.16.0/node-v22.16.0-linux-s390x.tar.gz"],
        version = "22.16.0",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_amd64",
        sha256 = "074e93576f2b0f0f689d12b5d71314c5cdc384b6efc315e264120f6a9dd348af",
        strip_prefix = "node-v24.2.0-linux-x64/",
        urls = ["https://nodejs.org/dist/v24.2.0/node-v24.2.0-linux-x64.tar.gz"],
        version = "24.2.0",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_arm64",
        sha256 = "e82b44212eb10ebf4de9bd945b2fcf950786117f6578581bcde0abf4d471af4a",
        strip_prefix = "node-v24.2.0-linux-arm64/",
        urls = ["https://nodejs.org/dist/v24.2.0/node-v24.2.0-linux-arm64.tar.gz"],
        version = "24.2.0",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_ppc64le",
        sha256 = "21a12614b868523799860b8f91462d6c947571d7da16675965cd5584077fa950",
        strip_prefix = "node-v24.2.0-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v24.2.0/node-v24.2.0-linux-ppc64le.tar.gz"],
        version = "24.2.0",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs24_s390x",
        sha256 = "32e493596dddb956da2388243159e6d22980a0c0439a0387cb7710106f402247",
        strip_prefix = "node-v24.2.0-linux-s390x/",
        urls = ["https://nodejs.org/dist/v24.2.0/node-v24.2.0-linux-s390x.tar.gz"],
        version = "24.2.0",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    return module_ctx.extension_metadata(
        root_module_direct_deps = [
            "nodejs20_amd64",
            "nodejs20_arm64",
            "nodejs20_arm",
            "nodejs20_ppc64le",
            "nodejs20_s390x",
            "nodejs22_amd64",
            "nodejs22_arm64",
            "nodejs22_arm",
            "nodejs22_ppc64le",
            "nodejs22_s390x",
            "nodejs24_amd64",
            "nodejs24_arm64",
            "nodejs24_ppc64le",
            "nodejs24_s390x",
        ],
        root_module_direct_dev_deps = [],
    )

_archive = tag_class(attrs = {})

node = module_extension(
    implementation = _node_impl,
    tag_classes = {
        "archive": _archive,
    },
)

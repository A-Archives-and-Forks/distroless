"node"

BUILD_TMPL = """\
# GENERATED BY node_archive.bzl
load("@distroless//private/pkg:debian_spdx.bzl", "debian_spdx")
load("@distroless//private/util:merge_providers.bzl", "merge_providers")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

pkg_tar(
    name = "data",
    srcs = glob(
        [
            "output/bin/node",
            "output/LICENSE",
        ],
    ),
    package_dir = "/nodejs",
    strip_prefix = "external/{canonical_name}/output"
)

pkg_tar(
    name = "_control",
    srcs = ["control"]
)

debian_spdx(
    name = "spdx",
    control = ":_control.tar",
    data = ":data.tar",
    package_name = "{package_name}",
    spdx_id = "{spdx_id}",
    sha256 = "{sha256}",
    urls = [{urls}]
)

merge_providers(
    name = "{name}",
    srcs = [":data", ":spdx"],
    visibility = ["//visibility:public"],
)
"""

def _impl(rctx):
    rctx.report_progress("Fetching {}".format(rctx.attr.package_name))
    rctx.download_and_extract(
        url = rctx.attr.urls,
        sha256 = rctx.attr.sha256,
        type = rctx.attr.type,
        stripPrefix = rctx.attr.strip_prefix,
        output = "output",
    )
    rctx.template(
        "control",
        rctx.attr.control,
        substitutions = {
            "{{VERSION}}": rctx.attr.version,
            "{{ARCHITECTURE}}": rctx.attr.architecture,
            "{{SHA256}}": rctx.attr.sha256,
        },
    )
    rctx.file(
        "BUILD.bazel",
        content = BUILD_TMPL.format(
            canonical_name = rctx.attr.name,
            name = rctx.attr.name.split("~")[-1],
            package_name = rctx.attr.package_name,
            spdx_id = rctx.attr.name,
            urls = ",".join(['"%s"' % url for url in rctx.attr.urls]),
            sha256 = rctx.attr.sha256,
        ),
    )

node_archive = repository_rule(
    implementation = _impl,
    attrs = {
        "urls": attr.string_list(mandatory = True),
        "sha256": attr.string(mandatory = True),
        "type": attr.string(default = ".tar.gz"),
        "strip_prefix": attr.string(),
        "package_name": attr.string(default = "nodejs"),
        "version": attr.string(mandatory = True),
        "architecture": attr.string(mandatory = True),
        # control is only used to populate the sbom, see https://github.com/GoogleContainerTools/distroless/issues/1373
        # for why writing debian control files to the image is incompatible with scanners.
        "control": attr.label(),
    },
)

def _node_impl(module_ctx):
    mod = module_ctx.modules[0]

    if len(module_ctx.modules) > 1:
        fail("node.archive should be called only once")
    if not mod.is_root:
        fail("node.archive should be called from root module only.")

    # Node (https://nodejs.org/en/about/releases/)
    # Follow Node's maintainence schedule and support all LTS versions that are not end of life

    node_archive(
        name = "nodejs18_amd64",
        sha256 = "27a9f3f14d5e99ad05a07ed3524ba3ee92f8ff8b6db5ff80b00f9feb5ec8097a",
        strip_prefix = "node-v18.20.8-linux-x64/",
        urls = ["https://nodejs.org/dist/v18.20.8/node-v18.20.8-linux-x64.tar.gz"],
        version = "18.20.8",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs18_arm64",
        sha256 = "2e3dfc51154e6fea9fc86a90c4ea8f3ecb8b60acaf7367c4b76691da192571c1",
        strip_prefix = "node-v18.20.8-linux-arm64/",
        urls = ["https://nodejs.org/dist/v18.20.8/node-v18.20.8-linux-arm64.tar.gz"],
        version = "18.20.8",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs18_arm",
        sha256 = "d09ea19ff5eb7b0ff47d80316c708092ac401c138254e018e21b89bb6ed9abd0",
        strip_prefix = "node-v18.20.8-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v18.20.8/node-v18.20.8-linux-armv7l.tar.gz"],
        version = "18.20.8",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs18_ppc64le",
        sha256 = "3c0c7e5f414c2123b185924e3afac3bc6fcc3edbe14ec2782e9d5210a76d8b8e",
        strip_prefix = "node-v18.20.8-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v18.20.8/node-v18.20.8-linux-ppc64le.tar.gz"],
        version = "18.20.8",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs18_s390x",
        sha256 = "6db3d48cabcb22f1f4af29633431b62d1040099a6e27182ad9f018c90f09d65b",
        strip_prefix = "node-v18.20.8-linux-s390x/",
        urls = ["https://nodejs.org/dist/v18.20.8/node-v18.20.8-linux-s390x.tar.gz"],
        version = "18.20.8",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_amd64",
        sha256 = "086ab500a98900a4c05127559b2cec4d659b3aa674453be5028d416de4eb1532",
        strip_prefix = "node-v20.19.1-linux-x64/",
        urls = ["https://nodejs.org/dist/v20.19.1/node-v20.19.1-linux-x64.tar.gz"],
        version = "20.19.1",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm64",
        sha256 = "f8fac0cc6cb06b4e443febda59178d5a6c6a5379e0194e6d156d3d3116e75b5f",
        strip_prefix = "node-v20.19.1-linux-arm64/",
        urls = ["https://nodejs.org/dist/v20.19.1/node-v20.19.1-linux-arm64.tar.gz"],
        version = "20.19.1",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_arm",
        sha256 = "8bcb0c923f0c6ebd0e4e635fb8765bf1a02b64a5f9a679a4fa94cd9f53e5ee74",
        strip_prefix = "node-v20.19.1-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v20.19.1/node-v20.19.1-linux-armv7l.tar.gz"],
        version = "20.19.1",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_ppc64le",
        sha256 = "e9f603f6494a453164dcd9ede175d14ea13e61838881dc0944cf230ff5d68c69",
        strip_prefix = "node-v20.19.1-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v20.19.1/node-v20.19.1-linux-ppc64le.tar.gz"],
        version = "20.19.1",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs20_s390x",
        sha256 = "062c526695ed64cacab20d266b0a993ce264ee3e1fe5da007a51ba98357c7321",
        strip_prefix = "node-v20.19.1-linux-s390x/",
        urls = ["https://nodejs.org/dist/v20.19.1/node-v20.19.1-linux-s390x.tar.gz"],
        version = "20.19.1",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_amd64",
        sha256 = "9d942932535988091034dc94cc5f42b6dc8784d6366df3a36c4c9ccb3996f0c2",
        strip_prefix = "node-v22.14.0-linux-x64/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-x64.tar.gz"],
        version = "22.14.0",
        architecture = "amd64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm64",
        sha256 = "8cf30ff7250f9463b53c18f89c6c606dfda70378215b2c905d0a9a8b08bd45e0",
        strip_prefix = "node-v22.14.0-linux-arm64/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-arm64.tar.gz"],
        version = "22.14.0",
        architecture = "arm64",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_arm",
        sha256 = "1cadf5aee7d71b6f0921235faec05e42d908ba5e8a76959f0697968fe0741204",
        strip_prefix = "node-v22.14.0-linux-armv7l/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-armv7l.tar.gz"],
        version = "22.14.0",
        architecture = "arm",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_ppc64le",
        sha256 = "a0818ece898175db71a1df81dc4fdc3794a14b03a3901894a88e465e745ea429",
        strip_prefix = "node-v22.14.0-linux-ppc64le/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-ppc64le.tar.gz"],
        version = "22.14.0",
        architecture = "ppc64le",
        control = "//nodejs:control",
    )

    node_archive(
        name = "nodejs22_s390x",
        sha256 = "0e4232e4b3c0312a391bb9c0c36524623b3b616cac5d0338d743ae4228f984d1",
        strip_prefix = "node-v22.14.0-linux-s390x/",
        urls = ["https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-s390x.tar.gz"],
        version = "22.14.0",
        architecture = "s390x",
        control = "//nodejs:control",
    )

    return module_ctx.extension_metadata(
        root_module_direct_deps = [
            "nodejs18_amd64",
            "nodejs18_arm64",
            "nodejs18_arm",
            "nodejs18_ppc64le",
            "nodejs18_s390x",
            "nodejs20_amd64",
            "nodejs20_arm64",
            "nodejs20_arm",
            "nodejs20_ppc64le",
            "nodejs20_s390x",
            "nodejs22_amd64",
            "nodejs22_arm64",
            "nodejs22_arm",
            "nodejs22_ppc64le",
            "nodejs22_s390x",
        ],
        root_module_direct_dev_deps = [],
    )

_archive = tag_class(attrs = {})

node = module_extension(
    implementation = _node_impl,
    tag_classes = {
        "archive": _archive,
    },
)
